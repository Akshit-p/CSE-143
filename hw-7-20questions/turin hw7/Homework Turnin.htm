<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">

<title>Homework Turnin</title>
<style type="text/css">
/* Grade-It homework turnin page style sheet */

a {
	color: #aa4400;
	text-decoration: none;
}

a:hover {
	background-color: #FFFF99;
	text-decoration: underline;
}

a img {
	border-width: 0;
}

.aside {
	font-size: small;
}

body {
	background-color: #ffffff;
	color: #000000;
	font-family: "Lucida Grande", "Lucida Sans Unicode", "Lucida", "Helvetica Neue", "Helvetica", Verdana, Arial, sans-serif;
	font-size: 10pt;
	padding: 1em;
}

#cheatpolicyexplain {
	color: #800;
	font-weight: bold;
}

.cheatwarning {
	text-indent: -2em;
	margin-left: 3em;
}

.deemphasized {
	color: #666666;
}

dt {
	font-weight: bold;
}

.emphasized {
	font-weight: bold;
}

.error, .errorfixed {
	background-color: #FFFFDD;
	border: thin solid gray;
	font-weight: bold;
}

.error {
	color: red;
}

.errorfixed {
	color: #000099;
}

#errormessage, .error, #warningmessage, .warning {
	font-size: 110%;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
	margin: 1em;
}

#errormessage, .error {
	background-color: #ffe8e8;
	border: 3px solid #777777;
	color: red;
	font-size: larger;
}

.excitingnews {
	background-color: #eeeeff;
	border: 2px dashed #00AA00;
	overflow: hidden;
	padding-left: 1em;
	padding-right: 1em;
}

.filename {
	text-decoration: none;
}

form, #main {
	padding-top: 1em;
	padding-left: 1em;
	padding-right: 1em;
	margin-left: auto;
	margin-right: auto;
	max-width: 70em;
}

form td, form th {
	padding-top: 0.3em;
}

h1 {
	margin: 0em;
	/* margin-top: 0.25em; */
	padding-top: 0.25em;
}

.highlight {
	background-color: yellow;
}

img {
	vertical-align: bottom;
}

img.icon {
	height: 16px;
	width: 16px;
	vertical-align: baseline;
}

img.imageicon, img.sidebaricon {
	border: none;
	height: 16px;
	width: 16px;
	vertical-align: middle;
}

input[readonly], input[readonly="readonly"] {
	background-color: #DDD;
	color: #555;
}

.leftcolumn {
	padding-right: 20px;
	text-align: left;
	vertical-align: top;
	width: 150px;
}

#loading {
	display: none;
}

.noteslist li {
	margin-bottom: 0.5em;
}

.saveforyourrecords {
	background-color: #ffc;
	border: 1px dashed red;
	padding: 0.5em;
}

.separated {
	padding-bottom: 2em;
}

.separatedtop {
	padding-top: 2em;
}

.success {
	color: #070;
	font-size: 200%;
	font-weight: bold;
}

.acceptedproblems {
	color: #730;
	font-size: 200%;
	font-weight: bold;
}

table {
	margin: 0px;
	padding: 0px;
	border-width: 0px;
	color: #000000;
	font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
}

td, th {
	vertical-align: top;
	white-space: nowrap;
}

td.spaced {
	padding-right: 20px;
}

tr.evenrow {
	background-color: #EEEEEE;
}

.turninlink {
	background-color: #EEEEEE;
	border: 2px solid #CCCCCC;
	float: right;
	margin-right: 1em;
	padding: 0.5em;
}

.urgent {
	color: #990000;
	font-weight: bold;
}

/* ------------------- */
button:hover, input[type="submit"]:hover {
	color: #666600;
}

h1 {
	padding: 0em;
	padding-top: 0.25em;
	text-align: center;
}

h2 {
	line-height: 16pt;
}

h2.spaced {
	margin-top: 2em;
}

.invalid {
	background-color: #ffff00;
}

#warningmessage, .warning {
	background-color: #fff8dd;
	border: 3px solid rgb(125, 85, 0) /* rgb(205, 135, 0) */;
	color: rgb(125, 85, 0);
	font-size: larger;
}

#errormessage p, #warningmessage p, .warning p {
	margin-top: 0.25em;
	margin-bottom: 0.25em;
}

.failure {
	color: red;
	font-weight: bold;
}

.filename {
	font-family: monospace;
}

hr {
	margin-top: 2em;
}

input[type="submit"] {
	font-family: Arial, sans-serif;
	font-size: 18pt;
	font-weight: bold;
	padding-left: 2em;
	padding-right: 2em;
}

.nametable {
	 border: none;
	 border-collapse: collapse;
	 margin: 0em;
	 padding: 0em;
}

.nametable td, .nametable th, td.filename {
	padding-right: 0.5em;
}

#submitarea {
	margin-bottom: 2em;
	margin-top: 2em;
	text-align: center;
}

.surveyarea, .tabcell {
	display: none;
}

th {
	padding-right: 2em;
	text-align: left;
}

/* */
body, html {
	margin: 0;
	padding: 0;
}

.codefile {
	border: 2px solid #2F6FAB;
	margin-bottom: 1em;
	padding: 0;
}

.codefile h2 {
	background-color: #2F6FAB;
	color: white;
	margin: 0;
	padding: 0 0.5em 0.25em;
}

.codefile pre, .codefile xmp {
	background-color: #F9F9F9;
	line-height: 1.05em;
	margin: 0;
	padding: 0.75em;
	overflow: auto;
}

.columnlabel {
	float: left;
	font-weight: bold;
	width: 9em;
}

.errormessage, .warningmessage {
	background-color: #FFEEEE;
	border: 2px dashed red;
	margin-left: 2em;
	margin-right: 2em;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
}

.errormessage h2, .warningmessage h2 {
	color: red;
	font-size: larger;
}

.errormessage pre {
	font-size: larger;
	font-weight: bold;
}

h1 {
	background-color: #EEEEEE;
	border-bottom: 2px solid gray;
	text-align: center;
}

h1, h2, h3 {
	white-space: nowrap;
}

.info {
	text-align: center;
}

#main {
	padding-left: 1em;
	padding-right: 1em;
}

#studentinfoheader {
	font-size: 12pt;
	font-weight: normal;
	margin-left: auto;
	margin-right: auto;
	min-width: 20em;
	width: 20em;
}

.tooltip {
	background-color: #FFFFAA;
	border: 1px solid #999999;
	margin: 0.5em;
}

.warningmessage {
	background-color: #FFFFDD;
	border: 2px dashed yellow;
	padding-left: 1em;
	padding-right: 1em;
}

/* geshi styles */
.codefile .imp {font-weight: bold; color: red;}
.codefile li, .codefile .li1 {font-weight: normal; vertical-align:top;}
.codefile .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.codefile .li2 {font-weight: bold; vertical-align:top;}
.codefile .kw1 {color: #000088; font-weight: bold;}
.codefile .kw2 {color: #000088; font-weight: bold;}
.codefile .kw1 {color: #000000;  font-weight: bold;}
.codefile .kw2 {color: #000000; font-weight: bold;}
.codefile .kw3 {color: #006600; font-weight: bold;}
.codefile .kw4 {color: #006600; font-weight: bold;}
.codefile .kw5 {color: #003399; font-weight: bold;}
.codefile .kw6 {color: #003399; font-weight: bold;}
.codefile .kw7 {color: #003399; font-weight: bold;}
.codefile .kw8 {color: #003399; font-weight: bold;}
.codefile .kw9 {color: #003399; font-weight: bold;}
.codefile .kw10 {color: #003399; font-weight: bold;}
.codefile .kw11 {color: #003399; font-weight: bold;}
.codefile .kw12 {color: #003399; font-weight: bold;}
.codefile .kw13 {color: #003399; font-weight: bold;}
.codefile .kw14 {color: #003399; font-weight: bold;}
.codefile .kw15 {color: #003399; font-weight: bold;}
.codefile .kw16 {color: #003399; font-weight: bold;}
.codefile .kw17 {color: #003399; font-weight: bold;}
.codefile .kw18 {color: #003399; font-weight: bold;}
.codefile .kw19 {color: #003399; font-weight: bold;}
.codefile .kw20 {color: #003399; font-weight: bold;}
.codefile .kw21 {color: #003399; font-weight: bold;}
.codefile .kw22 {color: #003399; font-weight: bold;}
.codefile .kw23 {color: #003399; font-weight: bold;}
.codefile .kw24 {color: #003399; font-weight: bold;}
.codefile .kw25 {color: #003399; font-weight: bold;}
.codefile .kw26 {color: #003399; font-weight: bold;}
.codefile .kw27 {color: #003399; font-weight: bold;}
.codefile .kw28 {color: #003399; font-weight: bold;}
.codefile .kw29 {color: #003399; font-weight: bold;}
.codefile .kw30 {color: #003399; font-weight: bold;}
.codefile .kw31 {color: #003399; font-weight: bold;}
.codefile .kw32 {color: #003399; font-weight: bold;}
.codefile .kw33 {color: #003399; font-weight: bold;}
.codefile .kw34 {color: #003399; font-weight: bold;}
.codefile .kw35 {color: #003399; font-weight: bold;}
.codefile .kw36 {color: #003399; font-weight: bold;}
.codefile .kw37 {color: #003399; font-weight: bold;}
.codefile .kw38 {color: #003399; font-weight: bold;}
.codefile .kw39 {color: #003399; font-weight: bold;}
.codefile .kw40 {color: #003399; font-weight: bold;}
.codefile .kw41 {color: #003399; font-weight: bold;}
.codefile .kw42 {color: #003399; font-weight: bold;}
.codefile .kw43 {color: #003399; font-weight: bold;}
.codefile .kw44 {color: #003399; font-weight: bold;}
.codefile .kw45 {color: #003399; font-weight: bold;}
.codefile .kw46 {color: #003399; font-weight: bold;}
.codefile .kw47 {color: #003399; font-weight: bold;}
.codefile .kw48 {color: #003399; font-weight: bold;}
.codefile .kw49 {color: #003399; font-weight: bold;}
.codefile .kw50 {color: #003399; font-weight: bold;}
.codefile .kw51 {color: #003399; font-weight: bold;}
.codefile .kw52 {color: #003399; font-weight: bold;}
.codefile .kw53 {color: #003399; font-weight: bold;}
.codefile .kw54 {color: #003399; font-weight: bold;}
.codefile .kw55 {color: #003399; font-weight: bold;}
.codefile .kw56 {color: #003399; font-weight: bold;}
.codefile .kw57 {color: #003399; font-weight: bold;}
.codefile .kw58 {color: #003399; font-weight: bold;}
.codefile .kw59 {color: #003399; font-weight: bold;}
.codefile .kw60 {color: #003399; font-weight: bold;}
.codefile .kw61 {color: #003399; font-weight: bold;}
.codefile .kw62 {color: #003399; font-weight: bold;}
.codefile .kw63 {color: #003399; font-weight: bold;}
.codefile .kw64 {color: #003399; font-weight: bold;}
.codefile .kw65 {color: #003399; font-weight: bold;}
.codefile .kw66 {color: #003399; font-weight: bold;}
.codefile .kw67 {color: #003399; font-weight: bold;}
.codefile .kw68 {color: #003399; font-weight: bold;}
.codefile .kw69 {color: #003399; font-weight: bold;}
.codefile .kw70 {color: #003399; font-weight: bold;}
.codefile .kw71 {color: #003399; font-weight: bold;}
.codefile .kw72 {color: #003399; font-weight: bold;}
.codefile .kw73 {color: #003399; font-weight: bold;}
.codefile .kw74 {color: #003399; font-weight: bold;}
.codefile .kw75 {color: #003399; font-weight: bold;}
.codefile .kw76 {color: #003399; font-weight: bold;}
.codefile .kw77 {color: #003399; font-weight: bold;}
.codefile .kw78 {color: #003399; font-weight: bold;}
.codefile .kw79 {color: #003399; font-weight: bold;}
.codefile .kw80 {color: #003399; font-weight: bold;}
.codefile .kw81 {color: #003399; font-weight: bold;}
.codefile .kw82 {color: #003399; font-weight: bold;}
.codefile .kw83 {color: #003399; font-weight: bold;}
.codefile .kw84 {color: #003399; font-weight: bold;}
.codefile .kw85 {color: #003399; font-weight: bold;}
.codefile .kw86 {color: #003399; font-weight: bold;}
.codefile .kw87 {color: #003399; font-weight: bold;}
.codefile .kw88 {color: #003399; font-weight: bold;}
.codefile .kw89 {color: #003399; font-weight: bold;}
.codefile .kw90 {color: #003399; font-weight: bold;}
.codefile .kw91 {color: #003399; font-weight: bold;}
.codefile .kw92 {color: #003399; font-weight: bold;}
.codefile .kw93 {color: #003399; font-weight: bold;}
.codefile .kw94 {color: #003399; font-weight: bold;}
.codefile .kw95 {color: #003399; font-weight: bold;}
.codefile .kw96 {color: #003399; font-weight: bold;}
.codefile .kw97 {color: #003399; font-weight: bold;}
.codefile .kw98 {color: #003399; font-weight: bold;}
.codefile .kw99 {color: #003399; font-weight: bold;}
.codefile .kw100 {color: #003399; font-weight: bold;}
.codefile .kw101 {color: #003399; font-weight: bold;}
.codefile .kw102 {color: #003399; font-weight: bold;}
.codefile .kw103 {color: #003399; font-weight: bold;}
.codefile .kw104 {color: #003399; font-weight: bold;}
.codefile .kw105 {color: #003399; font-weight: bold;}
.codefile .kw106 {color: #003399; font-weight: bold;}
.codefile .kw107 {color: #003399; font-weight: bold;}
.codefile .kw108 {color: #003399; font-weight: bold;}
.codefile .kw109 {color: #003399; font-weight: bold;}
.codefile .kw110 {color: #003399; font-weight: bold;}
.codefile .kw111 {color: #003399; font-weight: bold;}
.codefile .kw112 {color: #003399; font-weight: bold;}
.codefile .kw113 {color: #003399; font-weight: bold;}
.codefile .kw114 {color: #003399; font-weight: bold;}
.codefile .kw115 {color: #003399; font-weight: bold;}
.codefile .kw116 {color: #003399; font-weight: bold;}
.codefile .kw117 {color: #003399; font-weight: bold;}
.codefile .kw118 {color: #003399; font-weight: bold;}
.codefile .kw119 {color: #003399; font-weight: bold;}
.codefile .kw120 {color: #003399; font-weight: bold;}
.codefile .kw121 {color: #003399; font-weight: bold;}
.codefile .kw122 {color: #003399; font-weight: bold;}
.codefile .kw123 {color: #003399; font-weight: bold;}
.codefile .kw124 {color: #003399; font-weight: bold;}
.codefile .kw125 {color: #003399; font-weight: bold;}
.codefile .kw126 {color: #003399; font-weight: bold;}
.codefile .kw127 {color: #003399; font-weight: bold;}
.codefile .kw128 {color: #003399; font-weight: bold;}
.codefile .kw129 {color: #003399; font-weight: bold;}
.codefile .kw130 {color: #003399; font-weight: bold;}
.codefile .kw131 {color: #003399; font-weight: bold;}
.codefile .kw132 {color: #003399; font-weight: bold;}
.codefile .kw133 {color: #003399; font-weight: bold;}
.codefile .kw134 {color: #003399; font-weight: bold;}
.codefile .kw135 {color: #003399; font-weight: bold;}
.codefile .kw136 {color: #003399; font-weight: bold;}
.codefile .kw137 {color: #003399; font-weight: bold;}
.codefile .kw138 {color: #003399; font-weight: bold;}
.codefile .kw139 {color: #003399; font-weight: bold;}
.codefile .kw140 {color: #003399; font-weight: bold;}
.codefile .kw141 {color: #003399; font-weight: bold;}
.codefile .kw142 {color: #003399; font-weight: bold;}
.codefile .kw143 {color: #003399; font-weight: bold;}
.codefile .kw144 {color: #003399; font-weight: bold;}
.codefile .kw145 {color: #003399; font-weight: bold;}
.codefile .kw146 {color: #003399; font-weight: bold;}
.codefile .kw147 {color: #003399; font-weight: bold;}
.codefile .kw148 {color: #003399; font-weight: bold;}
.codefile .kw149 {color: #003399; font-weight: bold;}
.codefile .kw150 {color: #003399; font-weight: bold;}
.codefile .kw151 {color: #003399; font-weight: bold;}
.codefile .kw152 {color: #003399; font-weight: bold;}
.codefile .kw153 {color: #003399; font-weight: bold;}
.codefile .kw154 {color: #003399; font-weight: bold;}
.codefile .kw155 {color: #003399; font-weight: bold;}
.codefile .kw156 {color: #003399; font-weight: bold;}
.codefile .kw157 {color: #003399; font-weight: bold;}
.codefile .kw158 {color: #003399; font-weight: bold;}
.codefile .kw159 {color: #003399; font-weight: bold;}
.codefile .kw160 {color: #003399; font-weight: bold;}
.codefile .kw161 {color: #003399; font-weight: bold;}
.codefile .kw162 {color: #003399; font-weight: bold;}
.codefile .kw163 {color: #003399; font-weight: bold;}
.codefile .kw164 {color: #003399; font-weight: bold;}
.codefile .kw165 {color: #003399; font-weight: bold;}
.codefile .kw166 {color: #003399; font-weight: bold;}
.codefile .co1,
.codefile .co2,
.codefile .co3,
.codefile .coMULTI {color: #a1a100;}

/*
.codefile .co2 {color: #ff0000; font-style: italic;}
.codefile .co3 {color: #008000; font-style: italic;}
.codefile .coMULTI {color: #808080; font-style: italic;}
*/
.codefile .es0 {color: #000099; font-weight: bold;}
.codefile .es2 {color: #000099; font-weight: bold;}
.codefile .br0 {color: #00AA00;}
.codefile .sy0 {color: #00AA00;}
.codefile .st0 {color: #aa0000;}
.codefile .nu0 {color: #cc66cc;}
.codefile .re0 {color: #cc00cc;}
.codefile .re1 {color: #6666ff;}
.codefile .re2 {color: #3333ff;}
.codefile .re3 {color: #933;}
.codefile .ln-xtra, .codefile li.ln-xtra, .codefile div.ln-xtra {background-color: #ffc;}
.codefile span.xtra { display:block; }
.codefile .sc-2 {color: #404040;}
.codefile .sc-1 {color: #808080; font-style: italic;}
.codefile .sc0 {color: #00bbdd;}
.codefile .sc1 {color: #ddbb00;}
.codefile .sc2 {color: #009900;}
</style>

<style type="text/css" media="print">
.codefile {
	border: 1px dashed #2F6FAB;
}

.codefile pre, .codefile xmp {
	font-size: 9pt;
	letter-spacing: -0.5pt;
	line-height: 1em;
	margin: 0;
	padding: 0.25em;
	overflow: hidden;
}

.saveforyourrecords, .tooltip {
	display: none;
}
</style>
</head>

<body>
    <h1>Homework Turnin</h1>


<div id="main">
    <h2 id="studentinfoheader">

                    <span class="columnlabel">Name:</span>
            Akshit            K            Patel            <br>
        
        <span class="columnlabel">Email:</span>
        akshit@uw.edu        <br>

                    <span class="columnlabel">Student ID:</span>
            1561387            <br>
        
                    <span class="columnlabel">Section:</span>
            DC            <br>
        
        <span class="columnlabel">Course:</span>
        CSE         143        16au        <br> <span class="columnlabel">Assignment:</span>
        a7    </h2>


    <h2 id="studentinfoheader">
        <span class="columnlabel">Receipt ID:</span>
        a1f03c9d28de3ba045b3d1ec7ea4a138    </h2>


<div class="warning">
    <p>
        <strong>Warning:</strong> Your turnin is 1 day late.  Assignment a7 was due Thursday, December 1, 2016, 11:30 PM.        </p>
</div>

<p class="tooltip">Replacing prior submission from Thu 2016/12/01 11:15pm.</p>

<!--
<div class="warning">
    NOTE: Emailed receipts temporarily disabled because of a server problem.  Please save a copy of this web page because you won't be receiving a receipt email.
</div>
-->


    <h3 class="success">Turnin Successful!</h3>

    <p class="saveforyourrecords">
        Please <strong style="color: #090; background-color: #ffb">save or
            print a copy of this page</strong> for your records. A 
receipt has also been emailed to you, but you should still save or print
 a copy of this web page to make certain that you have proof of your 
turnin. <strong>If
            your files become lost or damaged and you do not have any record of
            your receipt, we will not be able to give you any credit for your
            work.</strong>
    </p>

    
    <p>The following file(s) were received:</p>

    

        <div class="codefile">
        <h2>
                QuestionsGame.java &nbsp; &nbsp;
                <span class="aside">(13079 bytes)</span>
        </h2>

        <pre><pre class="java5"><ol><li class="li1"><div class="de1"><span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* @author Akshit Patel</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* @Date 11/24/2016 </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* CSE 143D DC </span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;* TA: Melissa Medsker </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* HW #7 20 Questions</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*/</span></div></li><li class="li1"><div class="de1"><span class="kw2">import</span> <span class="co2">java.io.PrintStream</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1"><span class="kw2">import</span> <span class="co2">java.util.Scanner</span><span class="sy0">;</span></div></li><li class="li2"><div class="de2">&nbsp;</div></li><li class="li1"><div class="de1"><span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* QuestionsGame represents a game of N-questions where the computer plays with</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* user by guessing the answer to the questions given in a standard format text</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* file. The class also updates the questions with its associated correct answer</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;* when the answer guessed is wrong. The class also provides a useful method to</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* store the updated session of new questions and answers in standard form as a</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* text document, overwriting the original given text document.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* &lt;p&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;* Standard format of text document(.txt) considered for this class follows the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* rules:</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* &lt;ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  &lt;li&gt;The first line of document is either question(Q:) and then the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  associated question or an answer(A:) and then the associated answer.</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*  Like: &lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  &lt;ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*      &lt;i&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          Q:&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          is it an aninal?&lt;br&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*          A:&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          Dog&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*      &lt;/i&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  &lt;/ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  &lt;li&gt;Every question has to have a non-empty sequence of line pairs. i.e. it</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*  cannot be:&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  &lt;ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*      &lt;i&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          Q:&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          is it an aninal?&lt;br&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*          A:&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          Dog&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*      &lt;/i&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  &lt;/ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  but has to be more like:&lt;br&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*  &lt;ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*      &lt;i&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          Q:&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          is it an aninal?&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          A:&lt;br&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*          Dog&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          A:&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*          Human&lt;br&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*      &lt;/i&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  &lt;/ul&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*  where there is answer to question for yes or no. NOTE: there could be</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;*  another linked question instead of answer but it has to follow the same rule</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* &lt;/ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* &lt;/p&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;* </span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;*/</span></div></li><li class="li1"><div class="de1"><span class="kw2">public</span> <span class="kw2">class</span> QuestionsGame <span class="br0">{</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="coMULTI">/*</span></div></li><li class="li1"><div class="de1"><span class="coMULTI">&nbsp;    * Overall root of the question tree.</span></div></li><li class="li2"><div class="de2"><span class="coMULTI">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">private</span> QuestionNode root<span class="sy0">;</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * Constructs a new QuestionGame object representing the one given string</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * object.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @param object String representation of the object to be considered for</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        this QuestionGame. The String cannot be null</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    */</span></div></li><li class="li2"><div class="de2">    <span class="kw2">public</span> QuestionsGame<span class="br0">(</span><span class="kw21">String</span> object<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="kw2">this</span>.<span class="me1">root</span> = <span class="kw2">new</span> QuestionNode<span class="br0">(</span>object<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="co3">/**</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * Constructs a new QuestionGame object from a given scanner containing the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * questions and answers in standard format.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @param input Scanner containing questions and answers. The given scanner</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        is not null and is attached to a legal, existing file in Standard</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    *        format</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">public</span> QuestionsGame<span class="br0">(</span><span class="kw46">Scanner</span> input<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="kw2">this</span>.<span class="me1">root</span> = <span class="kw2">this</span>.<span class="me1">getQuestions</span><span class="br0">(</span>input<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li2"><div class="de2">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * Constructs a new QuestionGame question tree from a given scanner</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * containing the questions and answers in standard format.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * </span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * @param input Scanner containing questions with answers in standard</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        format. The given scanner is not null and is attached to a legal,</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        existing file in Standard format</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @return QuestionNode of the question tree made for this QuestionGame</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *         object.</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">private</span> QuestionNode getQuestions<span class="br0">(</span><span class="kw46">Scanner</span> input<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        QuestionNode current = <span class="kw4">null</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="co1">// make a branch if scanner has elements left to consider.</span></div></li><li class="li1"><div class="de1">        <span class="kw1">if</span> <span class="br0">(</span>input.<span class="me1">hasNextLine</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li2"><div class="de2">            <span class="co1">// get the type, either Q: or A:</span></div></li><li class="li1"><div class="de1">            <span class="kw21">String</span> type = input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="co1">// get the actual answer or question.</span></div></li><li class="li1"><div class="de1">            <span class="kw21">String</span> data = input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="co1">// if answer then we have a leaf.</span></div></li><li class="li2"><div class="de2">            <span class="kw1">if</span> <span class="br0">(</span>type.<span class="me1">equals</span><span class="br0">(</span><span class="st0">"A:"</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">                <span class="kw2">return</span> <span class="kw2">new</span> QuestionNode<span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="br0">}</span></div></li><li class="li1"><div class="de1">            <span class="co1">// otherwise construct a new branch to continue building.</span></div></li><li class="li1"><div class="de1">            current = <span class="kw2">new</span> QuestionNode<span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li2"><div class="de2">            <span class="co1">// construct the left and right branch.</span></div></li><li class="li1"><div class="de1">            current.<span class="me1">left</span> = <span class="kw2">this</span>.<span class="me1">getQuestions</span><span class="br0">(</span>input<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            current.<span class="me1">right</span> = <span class="kw2">this</span>.<span class="me1">getQuestions</span><span class="br0">(</span>input<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="br0">}</span></div></li><li class="li1"><div class="de1">        <span class="co1">// return the root of the question tree formed.</span></div></li><li class="li2"><div class="de2">        <span class="kw2">return</span> current<span class="sy0">;</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * Stores the current questions and answers to an output file represented by</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * the given PrintStream. This method is useful to store the question and</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * answer when incorrect guesses are made as new questions and answers are</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * added and thus can be used to later play another game with computer using</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * updated file. The file is made in standard format and overwrites data of</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * the given text document.</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @param output PrintStream representing the text file to store the current</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        question and answers of this QuestionGame object in standard</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        format.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @throws IllegalArgumentException if the given PrintStream is null.</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">public</span> <span class="kw3">void</span> saveQuestions<span class="br0">(</span><span class="kw20">PrintStream</span> output<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="kw1">if</span> <span class="br0">(</span>output == <span class="kw4">null</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">            <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw21">IllegalArgumentException</span><span class="br0">(</span><span class="st0">"File cannot be null!"</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="br0">}</span></div></li><li class="li2"><div class="de2">        <span class="kw2">this</span>.<span class="me1">readTree</span><span class="br0">(</span>output, <span class="kw2">this</span>.<span class="me1">root</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * Reads the question tree considered for this QuestionGame object and</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * stores it in standard format to a output file represented by the given</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * PrintStream.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @param output PrintStream representing the text file to store the current</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        question tree of this QuestionGame object in standard format. It</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    *        should not be null.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @param current QuestionNode of the question tree considered for this</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        QuestionGame object. Initially the root(not null). Used to read</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        and store the question tree in pre-order (Standard format)</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    */</span></div></li><li class="li2"><div class="de2">    <span class="kw2">private</span> <span class="kw3">void</span> readTree<span class="br0">(</span><span class="kw20">PrintStream</span> output, QuestionNode current<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="co1">// store the Answer if its a leaf.</span></div></li><li class="li1"><div class="de1">        <span class="kw1">if</span> <span class="br0">(</span>current.<span class="me1">left</span> == <span class="kw4">null</span> <span class="sy0">&amp;&amp;</span> current.<span class="me1">right</span> == <span class="kw4">null</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">            output.<span class="me1">println</span><span class="br0">(</span><span class="st0">"A:"</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            output.<span class="me1">println</span><span class="br0">(</span>current.<span class="me1">data</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li2"><div class="de2">        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">            output.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Q:"</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            output.<span class="me1">println</span><span class="br0">(</span>current.<span class="me1">data</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="co1">// store the remaining left and right branches.</span></div></li><li class="li1"><div class="de1">            <span class="kw2">this</span>.<span class="me1">readTree</span><span class="br0">(</span>output, current.<span class="me1">left</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li2"><div class="de2">            <span class="kw2">this</span>.<span class="me1">readTree</span><span class="br0">(</span>output, current.<span class="me1">right</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="br0">}</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="co3">/**</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * This method plays one complete guessing game with the user by using the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * current question tree to ask questions and eventually guesses the answer</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * based on user reply (handled by the method). Computer prints a message</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * saying that it won if the guess made is correct, otherwise it asks the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * user the following questions:&lt;br&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * &lt;ul&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *  &lt;li&gt;what object they were thinking of,</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *  &lt;li&gt;a question to distinguish that object from the player guess, and</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *  &lt;li&gt;whether the player object is the yes or no answer for that question.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * &lt;/ul&gt;</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * thus adding new questions and answers to this QuestionGame object.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * &lt;p&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * If a user reply is any word beginning with letter &lt;b&gt;y or Y&lt;/b&gt;, it is</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * considered to be a yes reply and any other beginning considered to be a</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * no.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * &lt;/p&gt;</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">public</span> <span class="kw3">void</span> play<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="co1">// scanner to get user input.</span></div></li><li class="li2"><div class="de2">        <span class="kw46">Scanner</span> getAns = <span class="kw2">new</span> <span class="kw46">Scanner</span><span class="br0">(</span><span class="kw21">System</span>.<span class="me1">in</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="co1">// play the game and update the tree if needed.</span></div></li><li class="li1"><div class="de1">        <span class="kw2">this</span>.<span class="me1">root</span> = <span class="kw2">this</span>.<span class="me1">getAnswer</span><span class="br0">(</span><span class="kw2">this</span>.<span class="me1">root</span>, getAns<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li2"><div class="de2">    <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * Plays one complete guessing game with the user by using the current</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * question tree to ask questions and eventually guesses the answer based on</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * user reply (given a scanner). Computer prints a message saying that it</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * won if the guess made is correct, otherwise it asks the user the</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * questions as described in method {@link play} in order to update the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * current question tree of this QuestionGame object to the new by getting</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * the correct guess object and it associated question. Only the incorrect</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * branch of the tree is changed.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * </span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * @param current QuestionNode of the question tree considered for this</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        QuestionGame object. Initially the root(not null). Used to read</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        and modify the question tree in pre-order (Standard format).</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @param input Scanner representing the user reply, it cannot be null.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @return QuestionNode of the question tree read or modified for this</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    *         QuestionGame object.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">private</span> QuestionNode getAnswer<span class="br0">(</span>QuestionNode current, <span class="kw46">Scanner</span> input<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="co1">// if we have a leaf, we have a possible answer.</span></div></li><li class="li1"><div class="de1">        <span class="kw1">if</span> <span class="br0">(</span>current.<span class="me1">left</span> == <span class="kw4">null</span> <span class="sy0">&amp;&amp;</span> current.<span class="me1">right</span> == <span class="kw4">null</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li2"><div class="de2">            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"I guess that your object is "</span> + current.<span class="me1">data</span></div></li><li class="li1"><div class="de1">                               + <span class="st0">"!"</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"Am I right? (y/n)? "</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="co1">// if user input start with y, then computer wins.</span></div></li><li class="li1"><div class="de1">            <span class="kw1">if</span> <span class="br0">(</span>input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">trim</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">toLowerCase</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">startsWith</span><span class="br0">(</span><span class="st0">"y"</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li2"><div class="de2">                <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Awesome! I win!"</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">                <span class="co1">// reference the current node to the new node.</span></div></li><li class="li1"><div class="de1">                current = <span class="kw2">this</span>.<span class="me1">updateTree</span><span class="br0">(</span>input, current<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="br0">}</span></div></li><li class="li2"><div class="de2">        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">            <span class="co1">// print the question, ask for response</span></div></li><li class="li1"><div class="de1">            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span>current.<span class="me1">data</span> + <span class="st0">" (y/n)? "</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="co1">// if response is yes, go read/modify left.</span></div></li><li class="li1"><div class="de1">            <span class="kw1">if</span> <span class="br0">(</span>input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">trim</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">toLowerCase</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">startsWith</span><span class="br0">(</span><span class="st0">"y"</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li2"><div class="de2">                current.<span class="me1">left</span> = getAnswer<span class="br0">(</span>current.<span class="me1">left</span>, input<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">                current.<span class="me1">right</span> = getAnswer<span class="br0">(</span>current.<span class="me1">right</span>, input<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="br0">}</span></div></li><li class="li1"><div class="de1">        <span class="br0">}</span></div></li><li class="li2"><div class="de2">        <span class="co1">// return the read/modified tree for this QuestionGame object.</span></div></li><li class="li1"><div class="de1">        <span class="kw2">return</span> current<span class="sy0">;</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">    <span class="co3">/**</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * Updates the current question tree with new question to be added with its</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * associated answers and also handles the interaction with the player as</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * mentioned in {@link getAnswer} to ask for the questions and answers if</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * given with a scanner.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * </span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    * @param input Scanner representing the user reply, it cannot be null</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @param current QuestionNode of the question tree considered for this</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        QuestionGame object. Initially the leaf where the question needs</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    *        to be added. Used to read and modify the question tree.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * @return new QuestionNode of the modified question tree.</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">private</span> QuestionNode updateTree<span class="br0">(</span><span class="kw46">Scanner</span> input, QuestionNode current<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Boo! I Lose."</span> + <span class="st0">"  Please help me get better!"</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"What is your object? "</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="co1">// get the user object.</span></div></li><li class="li2"><div class="de2">        <span class="kw21">String</span> object = input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Please give me a yes/no question that "</span></div></li><li class="li1"><div class="de1">                           + <span class="st0">"distinguishes between "</span></div></li><li class="li1"><div class="de1">                           + object</div></li><li class="li1"><div class="de1">                           + <span class="st0">" and "</span></div></li><li class="li2"><div class="de2">                           + current.<span class="me1">data</span></div></li><li class="li1"><div class="de1">                           + <span class="st0">"."</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"Q: "</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="co1">// get the user defined question.</span></div></li><li class="li1"><div class="de1">        <span class="kw21">String</span> question = input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li2"><div class="de2">        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"Is the answer <span class="es0">\"</span>yes<span class="es0">\"</span> for "</span> + object + <span class="st0">"? (y/n)? "</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="co1">// if user response is yes, the user object is at left node.</span></div></li><li class="li1"><div class="de1">        <span class="kw1">if</span> <span class="br0">(</span>input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">trim</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">toLowerCase</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">startsWith</span><span class="br0">(</span><span class="st0">"y"</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">            <span class="kw2">return</span> <span class="kw2">new</span> QuestionNode<span class="br0">(</span>question, <span class="kw2">new</span> QuestionNode<span class="br0">(</span>object<span class="br0">)</span>,</div></li><li class="li1"><div class="de1">                    current<span class="br0">)</span><span class="sy0">;</span></div></li><li class="li2"><div class="de2">        <span class="br0">}</span></div></li><li class="li1"><div class="de1">        <span class="co1">// otherwise, its the right node.</span></div></li><li class="li1"><div class="de1">        <span class="kw2">return</span> <span class="kw2">new</span> QuestionNode<span class="br0">(</span>question, current, <span class="kw2">new</span> QuestionNode<span class="br0">(</span>object<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">    <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li2"><div class="de2">    <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    * QuestionNode creates a simple binary tree of nodes with string data</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;    */</span></div></li><li class="li1"><div class="de1">    <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw2">class</span> QuestionNode <span class="br0">{</span></div></li><li class="li1"><div class="de1">        <span class="co3">/**</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;        * Data to be stored in the node, it cannot be changed.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        */</span></div></li><li class="li1"><div class="de1">        <span class="kw2">public</span> <span class="kw2">final</span> <span class="kw21">String</span> data<span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * Representing the left node of the binary tree, used to store answers</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;        * and questions in QuestionGame object question tree.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        */</span></div></li><li class="li1"><div class="de1">        <span class="kw2">public</span> QuestionNode left<span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="co3">/**</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * Representing the right node of the binary tree, used to store answers</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;        * and questions in QuestionGame object question tree.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        */</span></div></li><li class="li1"><div class="de1">        <span class="kw2">public</span> QuestionNode right<span class="sy0">;</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">        <span class="co3">/**</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;        * Constructs a new binary tree leaf with given data.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * @param data String representation of the data to be stored in the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        *        nodes of the binary tree. Should not be null</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        */</span></div></li><li class="li2"><div class="de2">        <span class="kw2">public</span> QuestionNode<span class="br0">(</span><span class="kw21">String</span> data<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">            <span class="kw2">this</span><span class="br0">(</span>data, <span class="kw4">null</span>, <span class="kw4">null</span><span class="br0">)</span><span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="br0">}</span></div></li><li class="li1"><div class="de1">&nbsp;</div></li><li class="li1"><div class="de1">        <span class="co3">/**</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;        * Constructs a new binary tree with given data and its left &amp; right</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * QuestionNode.</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * </span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * @param data String representation of the data to be stored in the</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        *        nodes of the binary tree. Should not be null</span></div></li><li class="li2"><div class="de2"><span class="co3">&nbsp;        * @param left representing the left node of the binary tree</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        * @param right representing the right node of the binary tree</span></div></li><li class="li1"><div class="de1"><span class="co3">&nbsp;        */</span></div></li><li class="li1"><div class="de1">        <span class="kw2">public</span> QuestionNode<span class="br0">(</span><span class="kw21">String</span> data,</div></li><li class="li1"><div class="de1">                            QuestionNode left,</div></li><li class="li2"><div class="de2">                            QuestionNode right<span class="br0">)</span> <span class="br0">{</span></div></li><li class="li1"><div class="de1">            <span class="kw2">this</span>.<span class="me1">data</span> = data<span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="kw2">this</span>.<span class="me1">left</span> = left<span class="sy0">;</span></div></li><li class="li1"><div class="de1">            <span class="kw2">this</span>.<span class="me1">right</span> = right<span class="sy0">;</span></div></li><li class="li1"><div class="de1">        <span class="br0">}</span></div></li><li class="li2"><div class="de2">    <span class="br0">}</span></div></li><li class="li1"><div class="de1"><span class="br0">}</span></div></li></ol></pre></pre>
    </div>

        
        <div class="codefile">
        <h2>
                myquestions.txt &nbsp; &nbsp;
                <span class="aside">(663 bytes)</span>
        </h2>

        <pre>Q:
Is the person an Soccer Athlete?
Q:
Is the person the best player?
A:
lionel messi
Q:
Is it sencond best?
A:
Cristiano Ronaldo
Q:
does he play in England?
Q:
does he play for Manchester United?
Q:
is he a striker?
A:
Zlatan Ibrahimovic
Q:
is he a midfielder?
Q:
does he dab?
A:
Paul Pogba
A:
Juan Mata
A:
David De Gea
Q:
Does he play for Chelsea?
A:
Eden Hazard
A:
Kevin De Bruyne
A:
Luis Suarez
Q:
Is the person a cricketer?
Q:
is he the best?
A:
Virat Kohli
Q:
Is he indian?
A:
MS Dhoni
A:
Chris Gayle
Q:
Is the person a common man?
A:
Akshit Patel
Q:
Is the person a celebrity?
A:
Tom cruise
A:
God
</pre>
    </div>

        
</div>


    <div id="loading">One moment...</div>
    <pre id="dumptarget"></pre>

    
            <script async="" src="Homework%20Turnin_files/analytics.js"></script><script src="Homework%20Turnin_files/additional.js" type="text/javascript"></script>

                    <script>
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
            ga('create', 'UA-78977559-1', 'auto');
            ga('send', 'pageview');
        </script>
    
    


</body></html>